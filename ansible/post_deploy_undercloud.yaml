##############################
# The expectation before running this is:
#
# - Your node is registered with a repository
# - Your node is patched and up to date
# - Your node has the undercloud deployed on it
#
# Special Notes:
#
#    - neutron_nameserver:  Set this to the IP address of your
#        nameserver, or alternatively, set this to the word
#        undercloud and it will pull the name server from the 
#        undercloud /etc/resolv.conf file and use that.
#
##############################

- name: Finalize undercloud deployment
  hosts: darin-undercloud
  vars_files:
    - vars/globals.yaml
    - vars/networking.yaml
  vars:
    - enable_overcloud_root_password: True
    - overcloud_root_password: Redhat01
    - neutron_nameserver: undercloud
  tasks:
    - name: Confirm the undercloud is deployed
      shell: |
             source ~/stackrc >/dev/null 2>&1
             openstack user list >/dev/null 2>&1
             echo $?
      register: undercloud_test
      become: yes
      become_user: "{{ uc_user }}"
    - name: Undercloud deployment validation fail
      fail:
        msg: "Error: Unable to reach undercloud. Exiting."
      when: undercloud_test.stdout != '0'
    - name: Install RHOSP Director Images and Libvirt Guest Tools for image customization
      yum:
        name: "{{ item }}"
      with_items:
        - rhosp-director-images
        - rhosp-director-images-ipa
        - libguestfs-tools
      become: true
      become_method: sudo
      become_user: root
    - name: Clean up image files if they exist
      file:
        path: ~/images/{{ item }}
        state: absent
      with_items:
        - ironic-python-agent.initramfs
        - ironic-python-agent.kernel
        - overcloud-full.initrd
        - overcloud-full.qcow2
        - overcloud-full.vmlinuz
      become: yes
      become_user: "{{ uc_user }}"
    - name: Clean up images in Glance if they exist
      shell: source ~/stackrc; openstack image delete {{ item }} >/dev/null 2>&1
      with_items:
        - bm-deploy-ramdisk
        - bm-deploy-kernel
        - overcloud-full
        - overcloud-full-initrd
        - overcloud-full-vmlinuz
      ignore_errors: True
      become: yes
      become_user: "{{ uc_user }}"
    - name: Extract images
      shell: |
             cd ~/images
             for i in $(ls /usr/share/rhosp-director-images/overcloud-full-latest-{{ osp_version }}*.tar /usr/share/rhosp-director-images/ironic-python-agent-latest-{{ osp_version }}*.tar)
             do
               tar -xvf $i
             done
      become: yes
      become_user: "{{ uc_user }}"
    - name: Set root password on the Overcloud Images
      when: enable_overcloud_root_password
      shell: |
             export LIBGUESTFS_BACKEND=direct
             virt-customize -a ~/images/overcloud-full.qcow2 --root-password password:{{ overcloud_root_password }}
      become: yes
      become_user: "{{ uc_user }}"
    - name: Upload images
      shell: source ~/stackrc; openstack overcloud image upload --image-path /home/stack/images/
      become: yes
      become_user: "{{ uc_user }}"
    - name: Get subnet ID
      shell: source ~/stackrc; openstack subnet list -f value -c ID
      register: neutron_subnet
      become: yes
      become_user: "{{ uc_user }}"
    - name: Get undercloud nameserver
      shell: egrep ^nameserver /etc/resolv.conf | head -1 | awk '{print $NF}'
      register: undercloud_nameserver
      when: neutron_nameserver == "undercloud"
      become: yes
      become_user: "{{ uc_user }}"
    - name: Set neutron nameserver to same as undercloud nameserver
      shell: source ~/stackrc; neutron subnet-update {{ neutron_subnet.stdout }} --dns-nameserver {{ undercloud_nameserver.stdout }}
      when: neutron_nameserver == "undercloud"
      become: yes
      become_user: "{{ uc_user }}"
    - name: Set neutron nameserver to {{ neutron_nameserver }}
      shell: source ~/stackrc; neutron subnet-update {{ neutron_subnet.stdout }} --dns-nameserver {{ neutron_nameserver }}
      when: neutron_nameserver != "undercloud"
      become: yes
      become_user: "{{ uc_user }}"
